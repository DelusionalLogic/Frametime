FrameTime
=========

Measure the time your computer/application/monitor takes from receiving
a keypress to displaying something different.

Why?
----

I believe response time is hugely important for the _feel_ of software. To that
end I'm interested in measuring and comparing the response time of different
applications. In the past I've used typometer[1], Which is easy to use and
requires almost no setup.

Typometer has a pretty severe limitation however. It only measures the time
until another application can read the pixel, a value I ultimately don't care
about. Instead I want to know the entire roundtrip time. From me pressing the
key, to my eye being able to see the change on the monitor. No software only
solution can provide that.

Nvidia has the LDAT (Latency Display Analysis Tool) as part of their _reviewer
toolkit_[2], but to my knowledge only people with platforms large enough to
provide PR for Nvidia can get a hold of that. I'd have a hard time trusting
a measurement device I can't audit anyway.

FrameTime is an alternative to these options. It's cheap and available: You can
make it yourself for around $20. It's open: So you can audit and fix it. It's
external: So it captures end-to-end. It's composable: So you can automate it
and use it has part of your build pipeline.

[1]: https://pavelfatin.com/typometer/
[2]: https://www.nvidia.com/en-us/geforce/news/nvidia-reviewer-toolkit/

How it works
------------

The hardware emulates a USB HID keyboard and a serial device. The serial device
is used for control signal to configure the measurement and start it. When the
measurement begins the device starts a timer and sends a keystroke. Using
a photodiode the device continuously monitors the light level of the monitor
for some time while streaming the measurements and their timings over the
serial interface. When measurement is completed (after a set amount of time)
the device then sends a reset keystroke and emits a terminator on the serial
bus. The measurement can then be analyzed after the fact.

Hardware
-------

The intended (and tested) hardware is a teensy2 with a SFH206K photodiode
connected between pin D4 and ground. Theoretically any atmega32u4 based
microprocessor should work.

Teensy 2.0 - $16     https://www.pjrc.com/store/teensy.html
SFH206K    - $ 1.37  https://www2.mouser.com/productdetail/osram-opto-semiconductors/sfh-206-k?qs=K5ta8V%252bWhtZrKhv9kwxagw==
Enclosure  - $ 1.00  Assumes you have a 3D printer handy
===================
Total      - $18.37

Attribution
-----------

The USB portion of this code is largely cobbled together from the examples
provided by pjrc for the teensy, their copyright notice is included in the
LICENSE.pjrc file.

Original work is licensed under the GPLv3. A complete copy of the license can
be found in LICENSE.
